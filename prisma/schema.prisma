generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // url      = "mysql://test:P@ssw0rd@123@35.184.15.150:3306/control_2025?schema=public"
  url      = "mysql://abdo:J[phDi7.:IzLxYCR@35.228.211.235:3306/control_2025?schema=public"
}

/// Staging
model class_desk {
  ID                    Int                     @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  School_Class_ID       Int
  Cloumn_Num            Int
  Row_Num               Int
  school_class          school_class            @relation(fields: [School_Class_ID], references: [ID], onDelete: Cascade, onUpdate: NoAction, map: "fk_Class_Desk_School_Class1")
  student_seat_numnbers student_seat_numnbers[]

  @@index([School_Class_ID], map: "fk_Class_Desk_School_Class1_idx")
}

model cohort {
  ID                  Int                   @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  School_Type_ID      Int
  Name                String                @unique(map: "Name_UNIQUE") @db.VarChar(45)
  Created_By          Int
  Created_At          DateTime              @default(now()) @db.Timestamp(0)
  Updated_By          Int?
  Updated_At          String?               @db.VarChar(45)
  Active              Int                   @default(1) @db.TinyInt
  school_type         school_type           @relation(fields: [School_Type_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Cohort_School_Type1")
  cohort_has_subjects cohort_has_subjects[]
  student             student[]

  @@index([Name, School_Type_ID], map: "A_school_type_with_the_same_name_already_exists")
  @@index([School_Type_ID], map: "fk_Cohort_School_Type1_idx")
}

model cohort_has_subjects {
  Cohort_ID   Int
  Subjects_ID Int
  cohort      cohort   @relation(fields: [Cohort_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Cohort_has_Subjects_Cohort1")
  subjects    subjects @relation(fields: [Subjects_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Cohort_has_Subjects_Subjects1")

  @@id([Cohort_ID, Subjects_ID])
  @@index([Cohort_ID], map: "fk_Cohort_has_Subjects_Cohort1_idx")
  @@index([Subjects_ID], map: "fk_Cohort_has_Subjects_Subjects1_idx")
}

model control_mission {
  ID                         Int                          @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Education_year_ID          Int
  Schools_ID                 Int
  Name                       String                       @db.VarChar(45)
  Created_By                 Int?
  Created_At                 DateTime                     @default(now()) @db.Timestamp(0)
  Updated_By                 Int?
  Updated_At                 String?                      @db.VarChar(45)
  Active                     Int                          @default(1) @db.TinyInt
  End_Date                   DateTime
  Start_Date                 DateTime
  education_year             education_year               @relation(fields: [Education_year_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Control_Mission_Education_year1")
  schools                    schools                      @relation(fields: [Schools_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Control_Mission_Schools1")
  control_mission_has_grades control_mission_has_grades[]
  exam_mission               exam_mission[]
  exam_room                  exam_room[]
  student_seat_numnbers      student_seat_numnbers[]

  @@index([Education_year_ID], map: "fk_Control_Mission_Education_year1_idx")
  @@index([Schools_ID], map: "fk_Control_Mission_Schools1_idx")
}

model education_year {
  ID              Int               @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Name            String            @unique(map: "Name_UNIQUE") @db.VarChar(45)
  control_mission control_mission[]
  exam_mission    exam_mission[]
}

model exam_mission {
  ID                         Int                          @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Subjects_ID                Int
  Control_Mission_ID         Int
  grades_ID                  Int
  education_year_ID          Int
  Month                      String                       @db.VarChar(45)
  Year                       String                       @db.VarChar(45)
  FinalDegree                String                       @default("100") @db.VarChar(45)
  Period                     Boolean                      @default(true)
  duration                   Int?
  start_time                 DateTime?                    @db.DateTime(0)
  end_time                   DateTime?                    @db.DateTime(0)
  pdf                        String?                      @db.Text
  pdf_V2                     String?                      @db.Text
  Created_By                 Int
  Created_At                 DateTime                     @default(now()) @db.Timestamp(0)
  Updated_By                 Int?
  Updated_At                 DateTime?                    @db.Timestamp(0)
  Active                     Int                          @default(1) @db.TinyInt
  Create_Only                Boolean                      @default(true)
  control_mission            control_mission              @relation(fields: [Control_Mission_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Subjects_has_Control_Mission_Control_Mission1")
  subjects                   subjects                     @relation(fields: [Subjects_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Subjects_has_Control_Mission_Subjects1")
  education_year             education_year               @relation(fields: [education_year_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_exam_mission_education_year1")
  grades                     grades                       @relation(fields: [grades_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_exam_mission_grades1")
  exam_room_has_exam_mission exam_room_has_exam_mission[]
  student_barcode            student_barcode[]

  @@unique([Subjects_ID, grades_ID, Control_Mission_ID], map: "Exam_already_exists_for_the_same_subject_grade_control_mission")
  @@index([Control_Mission_ID], map: "fk_Subjects_has_Control_Mission_Control_Mission1_idx")
  @@index([Subjects_ID], map: "fk_Subjects_has_Control_Mission_Subjects1_idx")
  @@index([education_year_ID], map: "fk_exam_mission_education_year1_idx")
  @@index([grades_ID], map: "fk_exam_mission_grades1_idx")
}

model exam_room {
  ID                         Int                          @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Control_Mission_ID         Int
  School_Class_ID            Int
  Name                       String                       @db.VarChar(45)
  Stage                      String                       @db.VarChar(45)
  Created_By                 Int?
  Created_At                 DateTime                     @default(now()) @db.Timestamp(0)
  Updated_By                 Int?
  Updated_At                 String?                      @db.VarChar(45)
  control_mission            control_mission              @relation(fields: [Control_Mission_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Exam_Room_Control_Mission1")
  school_class               school_class                 @relation(fields: [School_Class_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Exam_Room_School_Class1")
  exam_room_has_exam_mission exam_room_has_exam_mission[]
  proctor_in_room            proctor_in_room[]
  student_seat_numnbers      student_seat_numnbers[]

  @@index([Control_Mission_ID], map: "fk_Exam_Room_Control_Mission1_idx")
  @@index([School_Class_ID], map: "fk_Exam_Room_School_Class1_idx")
}

model grades {
  ID                         Int                          @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Schools_ID                 Int
  Name                       String                       @db.VarChar(45)
  Next_Grade                 Int?
  Created_By                 Int?
  Created_At                 DateTime                     @default(now()) @db.Timestamp(0)
  Updated_By                 Int?
  Updated_At                 DateTime?                    @db.Timestamp(0)
  Active                     Int                          @default(1) @db.TinyInt
  control_mission_has_grades control_mission_has_grades[]
  exam_mission               exam_mission[]
  schools                    schools                      @relation(fields: [Schools_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Grades_Schools1")
  student                    student[]
  student_seat_numnbers      student_seat_numnbers[]

  @@index([Schools_ID], map: "fk_Grades_Schools1_idx")
}

model roles {
  ID                Int                 @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Name              String              @unique(map: "Name_UNIQUE") @db.VarChar(45)
  roles_has_screens roles_has_screens[]
  users_has_roles   users_has_roles[]
}

model roles_has_screens {
  Roles_ID   Int
  Screens_ID Int
  roles      roles   @relation(fields: [Roles_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Roles_has_Screens_Roles1")
  screens    screens @relation(fields: [Screens_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Roles_has_Screens_Screens1")

  @@id([Roles_ID, Screens_ID])
  @@index([Roles_ID], map: "fk_Roles_has_Screens_Roles1_idx")
  @@index([Screens_ID], map: "fk_Roles_has_Screens_Screens1_idx")
}

model school_class {
  ID           Int          @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Schools_ID   Int
  Name         String       @db.VarChar(45)
  Max_Capacity String       @default("30") @db.VarChar(45)
  Floor        String       @default("0") @db.VarChar(45)
  Rows         String       @default("[6,6,6,6,6]") @db.VarChar(45)
  Columns      Int          @default(5)
  Created_By   Int
  Created_At   DateTime     @default(now()) @db.Timestamp(0)
  Updated_By   Int?
  Updated_At   DateTime?    @db.Timestamp(0)
  Active       Int          @default(1) @db.TinyInt
  Class_Number Int
  class_desk   class_desk[]
  exam_room    exam_room[]
  schools      schools      @relation(fields: [Schools_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_School_Class_Schools")
  student      student[]

  @@unique([Schools_ID, Name], map: "A_class_with_the_same_name_already_exists")
  @@unique([Schools_ID, Class_Number], map: "A_class_with_the_same_class_number_already_exists")
  @@index([Schools_ID], map: "fk_School_Class_Schools_idx")
}

model school_type {
  ID                       Int                        @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Name                     String                     @unique(map: "Name_UNIQUE") @db.VarChar(45)
  Created_By               Int
  Created_At               DateTime                   @default(now()) @db.Timestamp(0)
  Updated_By               Int?
  Updated_At               DateTime?                  @db.Timestamp(0)
  Active                   Int                        @default(1) @db.TinyInt
  cohort                   cohort[]
  school_type_has_subjects school_type_has_subjects[]
  schools                  schools[]
}

model schools {
  ID                Int                 @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  School_Type_ID    Int
  Name              String              @db.VarChar(100)
  Created_By        Int?
  Created_At        String?             @db.VarChar(45)
  Updated_By        Int?
  Updated_At        String?             @db.VarChar(45)
  Active            Int                 @default(1) @db.TinyInt
  control_mission   control_mission[]
  grades            grades[]
  school_class      school_class[]
  school_type       school_type         @relation(fields: [School_Type_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Schools_School_Type1")
  student           student[]
  users_has_schools users_has_schools[]

  @@index([School_Type_ID], map: "fk_Schools_School_Type1_idx")
}

model screens {
  ID                Int                 @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Name              String              @db.VarChar(45)
  Front_Id          String              @unique(map: "Front_Id_UNIQUE") @db.VarChar(45)
  roles_has_screens roles_has_screens[]
}

model student {
  ID                    Int                     @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Blb_Id                Int                     @unique
  First_Name            String                  @db.VarChar(45)
  Second_Name           String                  @db.VarChar(45)
  Third_Name            String?                 @db.VarChar(45)
  Grades_ID             Int
  Schools_ID            Int
  Cohort_ID             Int
  School_Class_ID       Int
  Email                 String?                 @db.VarChar(45)
  Second_Lang           String?                 @db.VarChar(45)
  Citizenship           String?                 @db.VarChar(45)
  Created_By            Int
  Created_At            DateTime                @default(now()) @db.Timestamp(0)
  Updated_By            Int?
  Updated_At            DateTime?               @db.Timestamp(0)
  Active                Int                     @default(1) @db.TinyInt
  Religion              String?                 @db.VarChar(45)
  Password              String?                 @db.VarChar(45)
  User_Name             String?                 @unique(map: "User_Name_UNIQUE") @db.VarChar(45)
  cohort                cohort                  @relation(fields: [Cohort_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Student_Cohort1")
  grades                grades                  @relation(fields: [Grades_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Student_Grades1")
  school_class          school_class            @relation(fields: [School_Class_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Student_School_Class1")
  schools               schools                 @relation(fields: [Schools_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Student_Schools1")
  user                  users                   @relation(fields: [Created_By], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_User_Schools1")
  student_barcode       student_barcode[]
  student_seat_numnbers student_seat_numnbers[]

  @@index([Cohort_ID], map: "fk_Student_Cohort1_idx")
  @@index([Grades_ID], map: "fk_Student_Grades1_idx")
  @@index([School_Class_ID], map: "fk_Student_School_Class1_idx")
  @@index([Schools_ID], map: "fk_Student_Schools1_idx")
  @@index([Created_By], map: "fk_User_Schools1")
}

model student_barcode {
  ID                       Int                   @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Exam_Mission_ID          Int
  Student_ID               Int
  student_seat_numnbers_ID Int
  Barcode                  String                @unique(map: "Barcode_UNIQUE") @db.VarChar(45)
  AttendanceStatusId       Int                   @default(0)
  StudentDegree            String?               @db.VarChar(45)
  Exam_Version             String                @default("A") @db.VarChar(1)
  isCheating               Int                   @default(0) @db.TinyInt
  exam_mission             exam_mission          @relation(fields: [Exam_Mission_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Exam_Mission_has_Student_Exam_Mission1")
  student                  student               @relation(fields: [Student_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Exam_Mission_has_Student_Student1")
  student_seat_numnbers    student_seat_numnbers @relation(fields: [student_seat_numnbers_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_barcode_student_seat_numnbers1")

  @@index([Exam_Mission_ID], map: "fk_Exam_Mission_has_Student_Exam_Mission1_idx")
  @@index([Student_ID], map: "fk_Exam_Mission_has_Student_Student1_idx")
  @@index([student_seat_numnbers_ID], map: "fk_student_barcode_student_seat_numnbers1_idx")
}

model student_seat_numnbers {
  ID                 Int               @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Exam_Room_ID       Int?
  Student_ID         Int
  Control_Mission_ID Int
  Seat_Number        String            @db.VarChar(6)
  Class_Desk_ID      Int?
  Grades_ID          Int
  Active             Int?              @default(1) @db.TinyInt
  student_barcode    student_barcode[]
  exam_room          exam_room?        @relation(fields: [Exam_Room_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Exam_Room_has_Student_Exam_Room1")
  student            student           @relation(fields: [Student_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Exam_Room_has_Student_Student1")
  class_desk         class_desk?       @relation(fields: [Class_Desk_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Student_Seat_Numnbers_Class_Desk1")
  control_mission    control_mission   @relation(fields: [Control_Mission_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Student_Seat_Numnbers_Control_Mission1")
  grades             grades            @relation(fields: [Grades_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Student_Seat_Numnbers_Grades1")

  @@unique([Control_Mission_ID, Student_ID], map: "Student_already_has_a_seat_number")
  @@index([Exam_Room_ID], map: "fk_Exam_Room_has_Student_Exam_Room1_idx")
  @@index([Student_ID], map: "fk_Exam_Room_has_Student_Student1_idx")
  @@index([Control_Mission_ID], map: "fk_Student_Seat_Numnbers_Control_Mission1_idx")
  @@index([Grades_ID], map: "fk_Student_Seat_Numnbers_Grades1_idx")
  @@index([Class_Desk_ID], map: "fk_Student_Seat_Numnbers_Class_Desk1")
}

model subjects {
  ID                       Int                        @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Name                     String                     @unique(map: "Name_UNIQUE") @db.VarChar(45)
  Active                   Int                        @default(1) @db.TinyInt
  InExam                   Int                        @default(1) @db.TinyInt
  Created_By               Int
  Created_At               DateTime                   @default(now()) @db.Timestamp(0)
  Updated_By               Int?
  Updated_At               DateTime?                  @db.Timestamp(0)
  cohort_has_subjects      cohort_has_subjects[]
  exam_mission             exam_mission[]
  school_type_has_subjects school_type_has_subjects[]
}

model system_logger {
  ID         Int      @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Created_At DateTime @default(now()) @db.Timestamp(0)
  body       String?  @db.Text
  method     String?  @db.Text
  platform   String?  @db.Text
  url        String?  @db.Text
  userAgent  String?  @db.Text
  userId     String?  @db.Text
  ip         String?  @db.Text
}

model users {
  ID                 Int                 @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Full_Name          String              @db.Text
  User_Name          String              @unique(map: "User_Name_UNIQUE") @db.VarChar(45)
  Password           String              @db.VarChar(45)
  Created_By         Int?
  Created_At         DateTime            @default(now()) @db.Timestamp(0)
  Updated_By         Int?
  Updated_At         String?             @db.VarChar(45)
  IsFloorManager     String?             @db.VarChar(45)
  Active             Int                 @default(1) @db.TinyInt
  Type               Int                 @default(0)
  LastSelectSchoolId Int?
  CreatedById        users?              @relation("UserCreatedBy", fields: [Created_By], references: [ID])
  CreatedByUsers     users[]             @relation("UserCreatedBy")
  users_has_roles    users_has_roles[]
  users_has_schools  users_has_schools[]
  student            student[]

  @@index([Created_By], map: "users_Created_By_fkey")
}

model users_has_roles {
  ID         Int       @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Users_ID   Int
  Roles_ID   Int
  Active     String    @default("1") @db.VarChar(45)
  Created_By Int
  Created_At DateTime  @default(now()) @db.Timestamp(0)
  Updated_By Int?
  Updated_At DateTime? @db.Timestamp(0)
  roles      roles     @relation(fields: [Roles_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Users_has_Roles_Roles1")
  users      users     @relation(fields: [Users_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Users_has_Roles_Users1")

  @@index([Roles_ID], map: "fk_Users_has_Roles_Roles1_idx")
  @@index([Users_ID], map: "fk_Users_has_Roles_Users1_idx")
}

model users_has_schools {
  Users_ID   Int
  Schools_ID Int
  schools    schools @relation(fields: [Schools_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Users_has_Schools_Schools1")
  users      users   @relation(fields: [Users_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Users_has_Schools_Users1")

  @@id([Users_ID, Schools_ID])
  @@index([Schools_ID], map: "fk_Users_has_Schools_Schools1_idx")
  @@index([Users_ID], map: "fk_Users_has_Schools_Users1_idx")
}

model proctors {
  ID              Int               @id @unique(map: "idProctors_UNIQUE") @default(autoincrement())
  Full_Name       String            @db.VarChar(100)
  User_Name       String            @unique(map: "User_Name_UNIQUE") @db.VarChar(45)
  Password        String            @db.VarChar(45)
  Active          String            @default("1") @db.VarChar(45)
  Created_By      Int
  Created_At      DateTime          @default(now()) @db.Timestamp(0)
  Updated_By      Int?
  Updated_At      DateTime?         @db.Timestamp(0)
  Division        String?           @db.VarChar(45)
  isFloorManager  String?           @db.VarChar(45)
  School_Id       Int
  proctor_in_room proctor_in_room[]
}

model control_mission_has_grades {
  control_mission_ID Int
  grades_ID          Int
  control_mission    control_mission @relation(fields: [control_mission_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_control_mission_has_grades_control_mission1")
  grades             grades          @relation(fields: [grades_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_control_mission_has_grades_grades1")

  @@id([control_mission_ID, grades_ID])
  @@index([control_mission_ID], map: "fk_control_mission_has_grades_control_mission1_idx")
  @@index([grades_ID], map: "fk_control_mission_has_grades_grades1_idx")
}

model exam_room_has_exam_mission {
  exam_room_ID    Int
  exam_mission_ID Int
  exam_mission    exam_mission @relation(fields: [exam_mission_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_exam_room_has_exam_mission_exam_mission1")
  exam_room       exam_room    @relation(fields: [exam_room_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_exam_room_has_exam_mission_exam_room1")

  @@id([exam_room_ID, exam_mission_ID])
  @@index([exam_mission_ID], map: "fk_exam_room_has_exam_mission_exam_mission1_idx")
  @@index([exam_room_ID], map: "fk_exam_room_has_exam_mission_exam_room1_idx")
}

model uuid {
  ID            Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  UUID          String    @unique(map: "UUID_UNIQUE") @map("UUID") @db.VarChar(45)
  ExamMissionId Int
  student_id    String    @db.VarChar(45)
  active        Int?      @default(0) @db.TinyInt
  CreatedAt     DateTime  @default(now()) @db.DateTime(0)
  UpdatedAt     DateTime? @db.Timestamp(0)
  Created_by    Int?
  Updated_By    Int?

  @@map("uuid")
}

model proctor_in_room {
  ID           Int       @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  proctors_ID  Int
  exam_room_ID Int
  Month        String    @db.VarChar(45)
  Year         String    @db.VarChar(45)
  Period       Boolean   @default(true)
  Attendance   String?   @db.VarChar(45)
  Active       String    @default("1") @db.VarChar(45)
  Created_By   Int
  Created_At   DateTime  @default(now()) @db.Timestamp(0)
  Updated_By   Int?
  Updated_At   DateTime? @db.Timestamp(0)
  exam_room    exam_room @relation(fields: [exam_room_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_proctors_has_exam_room_exam_room1")
  proctors     proctors  @relation(fields: [proctors_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_proctors_has_exam_room_proctors1")

  @@unique([proctors_ID, exam_room_ID, Month, Year, Period], map: "This_proctor_already_assigned_to_this_exam_room")
  @@index([exam_room_ID], map: "fk_proctors_has_exam_room_exam_room1_idx")
  @@index([proctors_ID], map: "fk_proctors_has_exam_room_proctors1_idx")
}

model stage {
  ID         Int       @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  Name       String    @db.VarChar(45)
  Active     Int       @default(1) @db.TinyInt
  Created_By Int
  Created_At DateTime  @default(now()) @db.Timestamp(0)
  Updated_By Int?
  Updated_At DateTime? @db.Timestamp(0)
}

model school_type_has_subjects {
  school_type_ID Int
  subjects_ID    Int
  school_type    school_type @relation(fields: [school_type_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_school_type_has_subjects_school_type1")
  subjects       subjects    @relation(fields: [subjects_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "fk_school_type_has_subjects_subjects1")

  @@id([school_type_ID, subjects_ID])
  @@index([school_type_ID], map: "fk_school_type_has_subjects_school_type1_idx")
  @@index([subjects_ID], map: "fk_school_type_has_subjects_subjects1_idx")
}
